var a = 12;
var b = a;
b = 13;
console.log(a);

var obj1 = { n: 100 };
var obj2 = obj1;
obj["n"] = 200;
console.log(obj.n);

// 浅分析JS的运行机制
// 1,当浏览器(他的内核/引擎)渲染和解析JS的时候,会提供一个供JS代码运行的环境,我们把这个环境称之为,全局作用域(global/window)
// 2 ,代码自上而下执行(之前还有一个变量提升阶段)
//  基本类性值会存储在当前作用域下
// var a = 12;
// 三部操作1,首先开辟一个空间储存12;2,在当前作用域中声明一个变量a (var a ) 3,让声明变量和存储12相关联(把储存的12赋值给a => 赋值操作是定义)
// 基本数据类型(也叫值类型)是按照值来操作的:把原有的值复制一份放到新的空间或位置上,和原来的值没有关系

// => 引用数据类型的值不能直接存储到当前的作用域下(应为可能存储的内容过于复杂),我们需要先开辟一个新的空间(理解为仓库),把内容存储到这个空间中
1,
  首先开辟一个空间,
  把对象中的键值对依次存储起来(
    为了保证可以找到这个空间,
    此空间有一个16进制的地址
  ),
  // 2,声明一个变量
  // 3,让变量和空间的地址关联在一起(把空间地址赋值给变量)
  // 引用类型不是按值操作,他操作的是空间的引用地址;把原来的空间地址赋值给变量,但原空间没有被克隆
//   还是一个空间,
  这样就会出现多个变量关联的是相同的空间,
  相互之间会存在影响了;
//
// 栈内存:本身是一个供JS代码执行的环境所有的基本类型值都会直接的在栈内存中开辟一个位置进行存储
// 堆内存:用来存储引用类型中的信息值的对象存储的键值对  函数存储得是代码字符串
// 
